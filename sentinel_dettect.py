import argparse
import pathlib
import csv
import sys
import json
import yaml


class NoAliasDumper(yaml.SafeDumper):
    def ignore_aliases(self, data):
        return True


class Dettect():

    def __init__(self):
        self.output_dir = "output"
        self.output_filename = "techniques_administration_sentinel"


    def create_file(self, args, parsed_rules):
        header = {
            "version": 1.2,
            "file_type": "technique-administration",
            "name": "microsoft-sentinel",
            "platform": ["all"],
            "techniques": parsed_rules,
            "notes": "This file was generated by sentinel-dettect.py"
        }

        default_output_dir = pathlib.Path(f"./{self.output_dir}")

        if args.output is None and default_output_dir.is_dir() is False:
            default_output_dir.mkdir(exist_ok=True)
            self.output_dir = default_output_dir

        if args.output is not None:
            self.output_dir = args.output

            if args.output.is_dir() is False:
                args.output.mkdir(exist_ok=True)

        with open(f"{self.output_dir}/{self.output_filename}.yml", "w", encoding="utf-8") as target_file:
            yaml.dump(header, target_file, sort_keys=False, Dumper=NoAliasDumper)



class SentinelRules():

    def __init__(self):
        self.parsed_rules = []


    def parse_rules(self, file):
        json_data = json.load(file)

        # handle ARM template rules
        for rule in json_data['resources']:
            rule_name = rule['properties']['displayName']
            rule_tactics = []

            if len(rule['properties']['tactics']) > 0:
                for tactic in rule['properties']['tactics']:
                    rule_tactics.append(tactic)

            rule_techniques = []
            if len(rule['properties']['techniques']) > 0:
                for technique in rule['properties']['techniques']:
                    rule_techniques.append(technique)

            detection = {
                'applicable_to': ['all'],
                'location': ['microsoft-sentinel', f'{rule_name}'],
                'comment':'',
                'score_logbook': [{'date':'', 'score': -1, 'comment':''}],
            }

            visibility = {
                'applicable_to': ['all'],
                'comment': '',
                'score_logbook': [{'date': '', 'score': 0, 'auto_generated': True}]
            }

            for technique in rule_techniques:
                parsed_rule = {
                    'technique_id': f'{technique}',
                    'technique_name': f'{self.get_technique_name(technique)}',
                    'detection': [detection],
                    'visibility': [visibility]
                }

                self.parsed_rules.append(parsed_rule)

    @staticmethod
    def get_technique_name(technique_id):
        with open('techniques-10_1.csv', mode='r', encoding="utf-8") as infile:
            reader = csv.reader(infile)
            mydict = {rows[0]:rows[1] for rows in reader}

        return mydict[technique_id]


def parse_arguments():
    parser = argparse.ArgumentParser(prog='sentinel-dettect.py',
        description='Create a DeTT&CT techniques administration file from Microsoft Sentinel analytics rules')
    parser.add_argument('-f', '--file', type=argparse.FileType('r'),
        help='the source file to convert to YAML')
    parser.add_argument('-d', '--directory', type=pathlib.Path,
        help='a source directory containing Sentinel rule files to convert')
    parser.add_argument('-o', '--output', type=pathlib.Path,
        help='specify a custom output file')
    args = parser.parse_args()

    if args.file is None and args.directory is None:
        print('[!] Please provide a source file to convert')
        sys.exit(1)
    else:
        return args


def main():
    args = parse_arguments()
    SR = SentinelRules()
    DT = Dettect()

    if args.file is not None:
        SR.parse_rules(args.file)

    if args.directory is not None:
        for file in args.directory.glob('*.json'):
            SR.parse_rules(file.open())

    DT.create_file(args, SR.parsed_rules)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print('Execution interrupted!')
